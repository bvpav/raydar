#version 460
#extension GL_EXT_ray_tracing : require

#include "common.glsl"

struct Camera {
    mat4 view_proj;     // Camera view * projection
    mat4 inverse_view;  // Camera inverse view matrix
    mat4 inverse_proj;  // Camera inverse projection matrix
};

struct World {
    vec3 top_color;
    vec3 bottom_color;
};

struct Material {
    vec3 albedo;
    float roughness;
    float metallic;
    vec3 emission_color;
    float emission_strength;
    float transmission;
    float ior;
    // HACK: This is done to fix an issue with the shader compiler and the data layout it generates
    vec2 _padding;
};

layout(location = 0) rayPayloadEXT HitRecord hit_record;

layout(set = 0, binding = 0) uniform accelerationStructureEXT tlas;
layout(set = 0, binding = 1) uniform _Camera { Camera camera; };
layout(set = 0, binding = 2) uniform _World { World world; };
layout(set = 0, binding = 5) buffer _Material { Material[] materials; };
layout(set = 1, binding = 0, rgba32f) uniform image2D image;

vec3 sample_world(vec3 origin, vec3 direction) {
    vec3 up = vec3(0.0, 1.0, 0.0);
    float cosine_similarity = dot(direction, up) / (length(direction) * length(up));
    vec3 sky_color = mix(world.bottom_color, world.top_color, (cosine_similarity + 1.0) * 0.5);
    return sky_color;
}

uint pcg_hash(uint seed) {
	uint state = seed * uint(747796405) + uint(2891336453);
	uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);
	return (word >> uint(22)) ^ word;
}

float rand() {
    uint seed = pcg_hash(gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * 1000);
    const float UINT_MAX = 4294967295.0;
    return float(seed) / UINT_MAX;
}

float rand_range(float min, float max) {
    return min + (max - min) * rand();
}

vec3 random_in_unit_sphere() {
    return vec3(rand_range(-1.0, 1.0), rand_range(-1.0, 1.0), rand_range(-1.0, 1.0));
}

void main() {
    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 in_uv = pixel_center / vec2(gl_LaunchSizeEXT.xy);
    vec2 d = in_uv * 2.0 - 1.0;

    vec4 ray_origin = camera.inverse_view * vec4(0, 0, 0, 1);
    vec4 ray_target = camera.inverse_proj * vec4(d.x, d.y, 1, 1);
    vec4 ray_direction = camera.inverse_view * vec4(normalize(ray_target.xyz), 0);

    vec3 light = vec3(0.0);
    vec3 attenuation = vec3(1.0);

    // TODO: control bounce count
    for (int bounces = 0; bounces < 12; ++bounces) {
        traceRayEXT(
            tlas,                 // acceleration structure
            gl_RayFlagsOpaqueEXT, // rayFlags
            0xFF,                 // cullMask
            0,                    // sbtRecordOffset
            0,                    // sbtRecordStride
            0,                    // missIndex
            ray_origin.xyz,       // ray origin
            0.001,                // ray min range (t_min)
            ray_direction.xyz,    // ray direction
            10000.0,              // ray max range (t_max)
            0                     // payload (location = 0)
        );

        if (hit_record.is_hit) {
            Material material = materials[hit_record.material_index];
            
            // The roughness is squared to achieve perceptual linearity.
            // (based on https://www.pbr-book.org/3ed-2018/Reflection_Models/Microfacet_Models.html
            //           https://www.pbr-book.org/4ed/Reflection_Models/Roughness_Using_Microfacet_Theory
            //           and research by Disney)
            float roughness = material.roughness * material.roughness;
            float metallic = material.metallic;
            float transmission = material.transmission;

            vec3 diffuse_direction = hit_record.world_normal + random_in_unit_sphere();
            if (dot(diffuse_direction, hit_record.world_normal) < 0.0) {
                diffuse_direction = -diffuse_direction;
            }

            vec3 perfect_reflection = reflect(ray_direction.xyz, hit_record.world_normal);

            // We perturb the reflection direction to achieve a more realistic reflection.
            // TODO: use a GGX (Trowbridge-Reitz) microfacet distribution.
            vec3 random_offset = random_in_unit_sphere() * roughness;
            vec3 specular_direction = normalize(perfect_reflection + random_offset);

            bool transmission_ray = rand() < transmission;
            vec3 direction;
            if (transmission_ray) {
                float ior = material.ior;
                if (hit_record.is_front_face) {
                    ior = 1.0 / ior;
                }
                
                vec3 ray_direction = normalize(ray_direction.xyz);

                // Apply Schlick's approximation for the Fresnel effect.
                float cos_theta = min(dot(ray_direction, -hit_record.world_normal), 1.0);
                float r0 = pow((ior - 1.0) / (ior + 1.0), 2.0);
                float reflection_coefficient = r0 + (1.0 - r0) * pow(1.0 - cos_theta, 5.0);

                if (reflection_coefficient < rand()) {
                    vec3 refracted = refract(ray_direction, hit_record.world_normal, ior);
                    vec3 random_offset = random_in_unit_sphere() * roughness;
                    direction = normalize(refracted + random_offset);
                } else {
                    direction = specular_direction;
                }
            } else if (rand() < metallic) {
                direction = specular_direction;
            } else {
                if (rand() < roughness) {
                    direction = diffuse_direction;
                } else {
                    direction = specular_direction;
                }
            }

            // Move the ray origin slightly along the direction of travel to avoid self-intersections
            vec3 offset = transmission_ray ? direction : hit_record.world_normal;
            
            ray_origin = vec4(hit_record.world_position + offset * 0.001, 1.0);
            ray_direction = vec4(direction, 0.0);
            float length2 = dot(ray_direction.xyz, ray_direction.xyz);
            if (length2 < 1e-10) {
                ray_direction.xyz = hit_record.world_normal;
            }

            attenuation *= material.albedo;

            light += material.emission_color * material.emission_strength;
        } else {
            light += sample_world(ray_origin.xyz, ray_direction.xyz) * attenuation;
            break;
        }
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(light, 1.0));
}
