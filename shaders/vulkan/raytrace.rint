#version 460
#extension GL_EXT_ray_tracing : require

#include "common.glsl"

layout(set = 0, binding = 6) buffer _Sphere { Sphere[] spheres; };

void main() {
    vec3 ray_origin = gl_WorldRayOriginEXT;
    vec3 ray_direction = gl_WorldRayDirectionEXT;
    Sphere sphere = spheres[gl_InstanceCustomIndexEXT];

    float a = dot(ray_direction, ray_direction);
    float k = dot(ray_origin, ray_direction) - dot(ray_direction, sphere.center);
    float c = dot(ray_origin, ray_origin) - 2.0 * dot(ray_origin, sphere.center) + dot(sphere.center, sphere.center) - sphere.radius * sphere.radius;

    float discriminant = k * k - a * c;

    if (discriminant >= 0.0) {
        float sqrt_discriminant = sqrt(discriminant);
        float t1 = (-k - sqrt_discriminant) / a;
        float t2 = (-k + sqrt_discriminant) / a;

        if (t1 >= 0.0) {
            reportIntersectionEXT(t1, 0);
        } else if (t2 >= 0.0) {
            reportIntersectionEXT(t2, 0);
        }
    }
} 